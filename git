touch
rm -r 删除一个文件夹，rm -r src 删除src目录
reset 重新初始化终端/清屏
history 查看历史命令
git config -l 查看git配置
git config --system --list 查看系统配置
git config --global --list 用户自己配置
D:\learn\Git\Git\etc\gitconfig Git系统配置目录
C:\Users\13366\.gitconfig Git用户自己配置的
查看用户名密码，及邮箱配置
git config user.name
git config user.password
git config user.email
配置
git config --global user.name 用户命
git config --global user.password 密码
git config --global user.email "邮箱"

git config --global user.name "1336658570"
git config --global  user.email "1336658570@qq.com"
Git本地三个工作区域：工作目录（Working Directory），暂存区（stage/Index），Index指向暂存区
资源库（Repository或Git Directory），HEAD指向的仓库，加上远程git仓库（Remote Directory）就
可以分为四个工作区域 
git add添加到暂存区
git commit 提交到本地git仓库
git push 推送到远程仓库
git pull 远程仓库拉倒本地仓库
git reset 从本地仓库到暂存区
git checkout 从暂存区到本地
git add . 将全部提交到暂存区

1.初始化
git init 
或git clone url
2.添加到暂存区（跟踪）
git add . 添加所有文件到暂存区
git rm 移出版本库
3.git commit -m "消息内容" 提交暂存区中的内容到本地仓库
配置ssh，实现免密码登录
C:\Users\13366\.ssh
ssh-keygen -t rsa
ssh-keygen -t rsa -C "你的邮箱"
4.git remote add origin git@github.com:beiszhihao/test.git
git remote add origin git@github.com:beiszhihao/test.git
git push -u origin master

3.git branch -M main
4. git remote add origin git@github.com:c1336658570/Python.git
5.git push -u origin main

git status 显示未被跟踪的

git branch 列出本地分支
git branch -r 列出远程分支
git branch name 新建一个分支
git merge [branch] 合并制定分支到当前分支
git branch -d 删除分支
删除远程分支
git push origin --delete[branch-name] 
git branch -dr [remote/branch]

git checkout <切换分支>
git checkout -b <your-branch-name> 创建并切换到新建分支
git merge 将一个分支合并到主分支
git rebase 将但前分支移动到某个分支

git log 查看提交日志
配置.gitignore
1.#忽略文件中的空行或以井号（#）开始的行
2.可以使用Linux通配符。例如：星号（*）代表任意多个字符，问号（？）代表一个字符，
方括号（[abc]）代表可选自付范围，大括号（string1,string2,...）代表可选的字符串等
3.如果名称最前面有一个感叹号（！），表示例外规则，将不会被忽略
4.如果名称的最前面是一个路径分隔符（/），表示要忽略的文件在此目录下，而子目录中的文件不忽略
5.如果名称的最后面是一个路径分隔符（/），表示要忽略的此目录下该名称的子目录，而非文件（默认文件或目录都忽略）
#注释
*/txt  忽略所有.txt结尾
！lib.txt 除了lib.txt
/temp  仅忽略项目根目录下的TODO文件，不包括其他目录的temp
build/ 忽略build目录下的文件
doc/*.txt 会忽略doc/notes.txt但不包括doc/server/arch.txt



# git 游戏

1. git commit

2.
git branch bugFix 创建一个分支
git checkout bugFix 切换到bugFix分支
如果你想创建一个新的分支同时切换到新创建的分支的话，可以通过 git checkout -b <your-branch-name> 来实现。


